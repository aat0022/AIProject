AStar.java
The file containing the A* algorithm. runAlgorithm accepts a start and end node and returns an 
ArrayList of nodes representing the path in order. Has two heuristic methods, distanceHeuristic representing linear distance, and manhattanHeuristic representing manhattan distance. They occupy the same spot in the code and are replaced when a different one is tested.

BFS.java
The file containing the BFS algorithm. runAlgorithm accepts a start and end node and returns an 
ArrayList of nodes representing the path in order.

DFS.java
The file containing the DFS algorithm. runAlgorithm accepts a start and end node and returns an 
ArrayList of nodes representing the path in order.

Driver.java
Has both a main and a run function which, when called, runs the algorithm designated in the code 
with random start and end points and returns the ArrayList of nodes representing the path.

Duple.java
Represents a pair of doubles. Has an x and a y.

Experiment.java
Calls Driver.run 100 times, measures the runtime total, prints it, and repeats this for 10 sets. 
The algorithm being used is changed in Driver.run.

Intersection.java
Represents an intersection. Has a longitude, latitude, ID, list of neighbors, and list of roads.

Map.java
Reads exported data and creates an array of intersections that can be read by Driver.java

Node.java
Represents one node in the graph. Can store a name, a list of neighbors, a Duple representing coordinates, 
a parent, and a cost.

NodeValue.java
Represents a node-value pair, used to represent neighbors and edge weights or nodes and their heuristic 
+ cost in the A* algorithm.

Points.java
Calls Driver.getList to get the nodes, converts them into a visual display, calls Driver.run to get
a representation of the path between two random nodes generated by the current algorithm, and displays 
this as well.

Intersections.arr
Saved list of intersections.

Map.osm
Exported data from Open Street Maps.

Commands Ran
runAlgorithm for every algorithm, distanceHeuristic and manhattanHeuristic in AStar, Driver.run in both 
Points and Experiment, Driver.getList in Points.
